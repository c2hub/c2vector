module c2vector;

import stdlib local;
import stdio local;

//Implementation of a Vector in C2. Based on tutorial for
//C by Edd Mann
public type Vector struct
{
    void** items;
    int32 capacity;
    int32 total;
}

public func void init(Vector* v)
{
    v.capacity = 4;
    v.total = 0;
    v.items = malloc(sizeof(void *) * v.capacity);
}

public func int32 total(Vector* v)
{
    return v.total;
}

func void resize(Vector* v, int32 capacity)
{
    void** items = realloc(v.items, sizeof(void *) * capacity);
    if (items != nil) 
	{
        v.items = items;
        v.capacity = capacity;
    }
}

public func void add(Vector* v, void* item)
{
    if (v.capacity == v.total)
        resize(v, v.capacity * 2);
    v.items[v.total++] = item;
}

public func void set(Vector* v, int32 index, void* item)
{
    if (index >= 0 && index < v.total)
        v.items[index] = item;
}

public func void* get(Vector* v, int32 index)
{
    if (index >= 0 && index < v.total)
        return v.items[index];
    return nil;
}

public func void delete(Vector* v, int32 index)
{
    if (index < 0 || index >= v.total)
        return;

    v.items[index] = nil;

    for (int32 i = index; i < v.total - 1; i++) 
	{
        v.items[i] = v.items[i + 1];
        v.items[i + 1] = nil;
    }

    v.total--;

    if (v.total > 0 && v.total == v.capacity / 4)
        resize(v, v.capacity / 2);
}

public func void free(Vector *v)
{
    stdlib.free(v.items);
}
